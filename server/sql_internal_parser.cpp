/*
	Copyright (c) 2017 TOSHIBA Digital Solutions Corporation

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Affero General Public License as
	published by the Free Software Foundation, either version 3 of the
	License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Affero General Public License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
#include "sql_internal_parser.h"
/**
 * @file   lempar.cpp
 * @brief  C++ Driver template for the LEMON parser generator.
 *         Just ported into C++ style.
 *
 */
/* The code below are written into .cpp file */

namespace lemon_SQLParser {
const SQLParser_YYACTIONTYPE SQLParser::yy_action[] = {
 /*     0 */   291,  593,   61,  591,  591,  591,  162,  591,  591,  591,
 /*    10 */   591,  529,  387,  386,  306,  425,  305,  498,  591,  591,
 /*    20 */   573,   89,  281,   83,   82,   45,  376,  121,  573,  313,
 /*    30 */   312,  595,  550,  573,  358,  182,  291,   83,   82,  574,
 /*    40 */   538,  573,  313,  312,  167,  455,  397,  574,  562,  562,
 /*    50 */   192,  138,  138,  586,   96,  139,  571,   89,  548,   83,
 /*    60 */    82,  454,  453,  404,  398,  544,  183,  163,  185,  442,
 /*    70 */   606,  587,  600,  318,  543,   83,   82,  538,  590,  377,
 /*    80 */   108,  500,  505,  272,  562,  562,  405,  552,  551,   95,
 /*    90 */   474,   98,   75,  555,  554,  557,  556,   88,   92,   90,
 /*   100 */    93,   91,  465,   87,   86,   85,   84,   81,   80,   79,
 /*   110 */    78,   23,   92,   90,   93,   91,   76,   87,   86,   85,
 /*   120 */    84,   81,   80,   79,   78,   95,  540,   98,   75,  555,
 /*   130 */   554,  557,  556,   88,   92,   90,   93,   91,  425,   87,
 /*   140 */    86,   85,   84,   81,   80,   79,   78,  291,   45,  262,
 /*   150 */   405,  552,  551,  258,  120,   87,   86,   85,   84,   81,
 /*   160 */    80,   79,   78,  130,  221,  405,  552,  551,   89,  374,
 /*   170 */    83,   82,  521,  369,  376,  538,  392,  391,  309,  165,
 /*   180 */   308,  307,  290,  291,   83,   82,  588,  398,  586,  153,
 /*   190 */   473,  405,  552,  551,  587,  562,  562,   58,  404,  405,
 /*   200 */   552,  551,  589,  572,   89,  258,   83,   82,  504,  157,
 /*   210 */   185,  572,  538,  392,  391,  309,  503,  308,  307,  290,
 /*   220 */    83,   82,  365,  340,  521,  366,  338,  489,  364,  506,
 /*   230 */   505,  562,  562,  535,  445,  607,   95,  390,   98,   75,
 /*   240 */   555,  554,  557,  556,   88,   92,   90,   93,   91,  155,
 /*   250 */    87,   86,   85,   84,   81,   80,   79,   78,  560,   92,
 /*   260 */    90,   93,   91,  419,   87,   86,   85,   84,   81,   80,
 /*   270 */    79,   78,   95,  314,   98,   75,  555,  554,  557,  556,
 /*   280 */    88,   92,   90,   93,   91,  425,   87,   86,   85,   84,
 /*   290 */    81,   80,   79,   78,  291,   28,  569,  568,  270,  311,
 /*   300 */   425,  561,  561,  425,   81,   80,   79,   78,  400,  425,
 /*   310 */    45,  425,  277,   45,  168,   89,  376,   83,   82,   45,
 /*   320 */   295,   45,  151,  586,  278,  196,  194,  230,  189,  482,
 /*   330 */   291,  416,  598,  404,  413,   81,   80,   79,   78,  173,
 /*   340 */   410,  587,  562,  562,  179,  547,  559,  558,  151,  398,
 /*   350 */    68,   89,  398,   83,   82,  492,  587,  680,  398,  587,
 /*   360 */   310,  610,  608,  319,  425,  587,  302,  587,  487,  486,
 /*   370 */   107,  500,  505,  437,   45,  479,  542,  596,  562,  562,
 /*   380 */   380,  247,  499,   95,  341,   98,   75,  555,  554,  557,
 /*   390 */   556,   88,   92,   90,   93,   91,  512,   87,   86,   85,
 /*   400 */    84,   81,   80,   79,   78,  229,  211,  519,  425,   77,
 /*   410 */    74,  406,  255,  393,   77,   74,  406,  228,   45,   95,
 /*   420 */   587,   98,   75,  555,  554,  557,  556,   88,   92,   90,
 /*   430 */    93,   91,  425,   87,   86,   85,   84,   81,   80,   79,
 /*   440 */    78,  497,   42,  170,  291,    3,   77,   74,  406,   72,
 /*   450 */   401,  425,  586,   66,  583,  434,  425,  370,  433,  425,
 /*   460 */   541,   15,  404,  581,  587,   89,   45,   83,   82,   45,
 /*   470 */   657,  580,   69,   70,  315,  533,  595,  363,  588,  389,
 /*   480 */   291,  191,  423,  887,  135,  443,    2,  407,  587,   63,
 /*   490 */   402,  485,  562,  562,  589,  151,  240,  236,   77,   74,
 /*   500 */   406,   89,  482,   83,   82,  398,  260,  587,  398,  531,
 /*   510 */   526,  166,  587,  388,  385,  587,  395,  418,  415,  412,
 /*   520 */   586,  569,  568,  524,  421,  328,  456,  384,  562,  562,
 /*   530 */   404,  579,  578,   95,  409,   98,   75,  555,  554,  557,
 /*   540 */   556,   88,   92,   90,   93,   91,  137,   87,   86,   85,
 /*   550 */    84,   81,   80,   79,   78,  224,  511,  425,  510,  447,
 /*   560 */   240,   71,  215,  336,  255,  576,  334,   47,  213,   95,
 /*   570 */    13,   98,   75,  555,  554,  557,  556,   88,   92,   90,
 /*   580 */    93,   91,  187,   87,   86,   85,   84,   81,   80,   79,
 /*   590 */    78,  458,  425,   67,  291,   65,  544,    5,   51,  595,
 /*   600 */   594,  171,   45,  577,  575,  543,   20,  258,  517,  425,
 /*   610 */   586,  179,  169,  587,  425,   89,  431,   83,   82,   49,
 /*   620 */   404,  586,  450,  382,   45,  425,  521,  595,  597,   22,
 /*   630 */   291,  404,  368,  301,  288,   25,  200,  449,  583,  438,
 /*   640 */   425,  398,  562,  562,  314,  346,  316,  581,  587,  425,
 /*   650 */    46,   89,  287,   83,   82,  580,  425,  303,  378,   48,
 /*   660 */   331,  425,  314,  398,  425,  587,   31,  286,  517,  429,
 /*   670 */   587,  109,  304,  317,  112,  592,  178,  314,  562,  562,
 /*   680 */   221,  587,  221,   95,  221,   98,   75,  555,  554,  557,
 /*   690 */   556,   88,   92,   90,   93,   91,  587,   87,   86,   85,
 /*   700 */    84,   81,   80,   79,   78,  587,  470,  154,  177,  321,
 /*   710 */   175,   99,  587,  609,    2,  579,  578,  587,  221,   95,
 /*   720 */   587,   98,   75,  555,  554,  557,  556,   88,   92,   90,
 /*   730 */    93,   91,  296,   87,   86,   85,   84,   81,   80,   79,
 /*   740 */    78,  291,    3,  425,  190,  270,   72,  401,  425,  576,
 /*   750 */   264,  583,  274,  111,  263,  400,  425,   94,  110,  571,
 /*   760 */   581,  597,   89,  425,   83,   82,  106,  597,  580,   69,
 /*   770 */    70,  315,  273,  105,  161,  174,  261,  291,  432,  423,
 /*   780 */   567,  595,  566,  362,   10,  608,  319,  577,  160,  562,
 /*   790 */   562,    9,  565,  159,  553,    8,  425,  425,   89,  587,
 /*   800 */    83,   82,  564,  158,  587,  595,  116,  115,  425,  563,
 /*   810 */   425,  425,  587,    7,  418,  415,  412,    1,  114,  587,
 /*   820 */   113,  119,  403,    6,  222,  562,  562,  549,  579,  578,
 /*   830 */    95,  409,   73,   75,  555,  554,  557,  556,   88,   92,
 /*   840 */    90,   93,   91,  124,   87,   86,   85,   84,   81,   80,
 /*   850 */    79,   78,  587,  587,   21,  546,   68,  545,   71,   19,
 /*   860 */    18,   60,  576,  537,  587,  219,  587,  587,   98,   75,
 /*   870 */   555,  554,  557,  556,   88,   92,   90,   93,   91,  536,
 /*   880 */    87,   86,   85,   84,   81,   80,   79,   78,  291,    3,
 /*   890 */   534,  532,  425,   72,  401,  220,  530,  528,  583,  152,
 /*   900 */   577,  575,  118,   20,  425,  527,  525,  581,  523,   89,
 /*   910 */   425,   83,   82,  184,  129,  580,   69,   70,  315,  509,
 /*   920 */   128,  425,  507,  425,   12,  243,  423,  181,  657,  246,
 /*   930 */   245,  127,  244,  134,  425,   56,  562,  562,  495,  241,
 /*   940 */   493,  491,   17,  218,  100,  490,   55,  425,  587,  361,
 /*   950 */   488,  150,  481,  359,  239,  217,  125,  104,  425,  355,
 /*   960 */   587,  418,  415,  412,  235,  232,  587,  123,  103,  350,
 /*   970 */   351,  226,  477,  149,    4,  579,  578,  587,  409,  587,
 /*   980 */    75,  555,  554,  557,  556,   88,   92,   90,   93,   91,
 /*   990 */   587,   87,   86,   85,   84,   81,   80,   79,   78,  475,
 /*  1000 */   471,  299,    3,  587,  209,   71,   62,  401,  425,  576,
 /*  1010 */   342,  583,  425,  425,  587,  425,  270,  425,   44,  210,
 /*  1020 */   581,  464,  102,   50,  425,  133,  400,  132,  580,   69,
 /*  1030 */    70,  315,  208,  463,  131,  207,  425,  205,  202,  423,
 /*  1040 */   206,  204,  330,  329,   54,  117,   43,  577,  575,  425,
 /*  1050 */    20,  425,  285,  425,  284,  283,  282,  203,  201,   30,
 /*  1060 */   164,   41,   53,   40,  587,  142,  198,  425,  587,  587,
 /*  1070 */    52,  587,  425,  587,  418,  415,  412,   29,  294,  141,
 /*  1080 */   587,  197,   39,  444,  604,   22,  502,  425,  579,  578,
 /*  1090 */   425,  409,  587,  144,  583,  360,  425,  101,  425,  595,
 /*  1100 */    38,  605,  425,  581,  293,  587,   16,  587,   37,  587,
 /*  1110 */   425,  580,   36,  303,  378,  292,  279,  199,   71,   24,
 /*  1120 */    35,  425,  576,  587,  425,  603,  367,  280,  587,  427,
 /*  1130 */   252,   34,  602,  601,   27,  425,  439,  430,  270,  441,
 /*  1140 */    58,  436,  440,  587,  188,   26,  587,  425,  276,  599,
 /*  1150 */   275,  426,  587,  126,  587,  425,  394,   33,  587,   59,
 /*  1160 */   577,  575,  268,   20,  381,   32,  587,  396,  435,   97,
 /*  1170 */   424,  579,  578,  582,   14,  289,  422,  587,  570,  344,
 /*  1180 */   587,  298,  172,  420,  585,   64,  297,  266,  522,   57,
 /*  1190 */   332,  587,  267,  383,  379,  518,  126,  515,  265,  371,
 /*  1200 */   584,  375,  501,  587,  238,  576,  373,  180,  237,  356,
 /*  1210 */   357,  587,  234,  223,  231,  233,  478,  480,  353,  256,
 /*  1220 */   587,  345,  520,  516,  253,  372,  352,  349,  250,  186,
 /*  1230 */   514,  248,  508,  225,  227,  457,  347,  496,  348,  513,
 /*  1240 */   472,  469,  468,  577,  148,  300,  452,  242,  476,  147,
 /*  1250 */   216,  214,  494,  467,  212,  143,  466,  343,  339,  462,
 /*  1260 */   337,  178,  461,  335,  460,  324,  193,  333,  176,  459,
 /*  1270 */   136,  145,  327,  326,  325,  322,  140,  259,  156,  320,
 /*  1280 */    78,  888,  484,  146,  888,  888,  269,  888,  888,  483,
 /*  1290 */   888,  122,  888,  888,  888,  888,  888,  888,  888,  446,
 /*  1300 */   888,  888,  451,  428,  417,  254,  251,  399,  249,  414,
 /*  1310 */   411,  195,  408,  888,  354,  888,  888,  888,  888,  888,
 /*  1320 */   888,  888,  888,  888,   11,  448,  271,  888,  888,  888,
 /*  1330 */   888,  888,  888,  888,  888,  888,  888,  323,  888,  888,
 /*  1340 */   888,  888,  888,  257,  888,  888,  888,  888,  888,  539,
};
const SQLParser_YYCODETYPE SQLParser::yy_lookahead[] = {
 /*     0 */    14,   11,   16,   85,   86,   87,   16,   89,   90,   91,
 /*    10 */    92,  151,  152,  153,  154,  186,  156,   11,  100,  101,
 /*    20 */    28,   35,    9,   37,   38,  196,  186,   10,   36,   37,
 /*    30 */    38,   39,   11,   28,   21,   11,   14,   37,   38,   28,
 /*    40 */    16,   36,   37,   38,  215,  186,  217,   36,   62,   63,
 /*    50 */    16,   22,   23,  224,   68,   26,   39,   35,   11,   37,
 /*    60 */    38,  202,  203,  234,  235,   43,   11,  245,  246,  180,
 /*    70 */   181,  242,  183,  184,   52,   37,   38,   16,   11,  239,
 /*    80 */   240,  241,  242,   16,   62,   63,  144,  145,  146,  103,
 /*    90 */   201,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   100 */   114,  115,  213,  117,  118,  119,  120,  121,  122,  123,
 /*   110 */   124,  222,  112,  113,  114,  115,  116,  117,  118,  119,
 /*   120 */   120,  121,  122,  123,  124,  103,   16,  105,  106,  107,
 /*   130 */   108,  109,  110,  111,  112,  113,  114,  115,  186,  117,
 /*   140 */   118,  119,  120,  121,  122,  123,  124,   14,  196,   11,
 /*   150 */   144,  145,  146,   20,   16,  117,  118,  119,  120,  121,
 /*   160 */   122,  123,  124,   10,  186,  144,  145,  146,   35,  217,
 /*   170 */    37,   38,   39,  121,  186,  151,  152,  153,  154,  215,
 /*   180 */   156,  157,  158,   14,   37,   38,  134,  235,  224,   20,
 /*   190 */   212,  144,  145,  146,  242,   62,   63,  163,  234,  144,
 /*   200 */   145,  146,  150,   28,   35,   20,   37,   38,   28,  245,
 /*   210 */   246,   36,  151,  152,  153,  154,   36,  156,  157,  158,
 /*   220 */    37,   38,   14,  134,   39,   17,  137,   19,   20,  241,
 /*   230 */   242,   62,   63,  151,   73,    1,  103,  155,  105,  106,
 /*   240 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  139,
 /*   250 */   117,  118,  119,  120,  121,  122,  123,  124,   19,  112,
 /*   260 */   113,  114,  115,  194,  117,  118,  119,  120,  121,  122,
 /*   270 */   123,  124,  103,  204,  105,  106,  107,  108,  109,  110,
 /*   280 */   111,  112,  113,  114,  115,  186,  117,  118,  119,  120,
 /*   290 */   121,  122,  123,  124,   14,  196,  202,  203,  137,  205,
 /*   300 */   186,   62,   63,  186,  121,  122,  123,  124,  147,  186,
 /*   310 */   196,  186,   11,  196,  215,   35,  186,   37,   38,  196,
 /*   320 */    25,  196,  186,  224,  188,  164,  165,   50,  167,  193,
 /*   330 */    14,  217,   28,  234,  217,  121,  122,  123,  124,   10,
 /*   340 */   217,  242,   62,   63,  186,   11,  107,  108,  186,  235,
 /*   350 */    16,   35,  235,   37,   38,  193,  242,   80,  235,  242,
 /*   360 */   235,    0,    1,    2,  186,  242,  208,  242,  206,  207,
 /*   370 */   240,  241,  242,   27,  196,   98,  219,   11,   62,   63,
 /*   380 */   236,  237,  238,  103,   35,  105,  106,  107,  108,  109,
 /*   390 */   110,  111,  112,  113,  114,  115,  244,  117,  118,  119,
 /*   400 */   120,  121,  122,  123,  124,  128,   57,   11,  186,  257,
 /*   410 */   258,  259,   16,  235,  257,  258,  259,  140,  196,  103,
 /*   420 */   242,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   430 */   114,  115,  186,  117,  118,  119,  120,  121,  122,  123,
 /*   440 */   124,   11,  196,  215,   14,   10,  257,  258,  259,   14,
 /*   450 */    15,  186,  224,  173,   19,   29,  186,  235,   25,  186,
 /*   460 */   219,  196,  234,   28,  242,   35,  196,   37,   38,  196,
 /*   470 */   141,   36,   37,   38,   39,  151,   39,   11,  134,  155,
 /*   480 */    14,  253,   47,  176,  177,  178,  179,  217,  242,  173,
 /*   490 */   217,   11,   62,   63,  150,  186,   16,  188,  257,  258,
 /*   500 */   259,   35,  193,   37,   38,  235,  260,  242,  235,  151,
 /*   510 */   151,  215,  242,  155,  155,  242,  251,   82,   83,   84,
 /*   520 */   224,  202,  203,  151,  205,  220,  221,  155,   62,   63,
 /*   530 */   234,   96,   97,  103,   99,  105,  106,  107,  108,  109,
 /*   540 */   110,  111,  112,  113,  114,  115,   26,  117,  118,  119,
 /*   550 */   120,  121,  122,  123,  124,   11,  121,  186,  121,   11,
 /*   560 */    16,  126,  135,  134,   16,  130,  137,  196,  141,  103,
 /*   570 */    10,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   580 */   114,  115,  227,  117,  118,  119,  120,  121,  122,  123,
 /*   590 */   124,   11,  186,  172,   14,  174,   43,   10,  243,   39,
 /*   600 */    28,  215,  196,  168,  169,   52,  171,   20,  186,  186,
 /*   610 */   224,  186,  215,  242,  186,   35,   30,   37,   38,  196,
 /*   620 */   234,  224,   58,  217,  196,  186,   39,   39,  186,   10,
 /*   630 */    14,  234,  186,  208,  194,  196,   48,   73,   19,  197,
 /*   640 */   186,  235,   62,   63,  204,  217,  200,   28,  242,  186,
 /*   650 */   196,   35,  194,   37,   38,   36,  186,   38,   39,  196,
 /*   660 */   127,  186,  204,  235,  186,  242,  196,  194,  186,   10,
 /*   670 */   242,  196,  250,   28,  196,   11,  143,  204,   62,   63,
 /*   680 */   186,  242,  186,  103,  186,  105,  106,  107,  108,  109,
 /*   690 */   110,  111,  112,  113,  114,  115,  242,  117,  118,  119,
 /*   700 */   120,  121,  122,  123,  124,  242,  212,   10,  212,  186,
 /*   710 */   212,   35,  242,  178,  179,   96,   97,  242,  186,  103,
 /*   720 */   242,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   730 */   114,  115,  250,  117,  118,  119,  120,  121,  122,  123,
 /*   740 */   124,   14,   10,  186,  212,  137,   14,   15,  186,  130,
 /*   750 */   141,   19,   10,  196,  141,  147,  186,   10,  196,   39,
 /*   760 */    28,  186,   35,  186,   37,   38,  196,  186,   36,   37,
 /*   770 */    38,   39,  197,  196,   10,  252,   11,   14,  197,   47,
 /*   780 */    11,   39,   11,   17,   16,    1,    2,  168,   10,   62,
 /*   790 */    63,   16,   11,   10,  134,   16,  186,  186,   35,  242,
 /*   800 */    37,   38,   11,   10,  242,   39,  196,  196,  186,   11,
 /*   810 */   186,  186,  242,   16,   82,   83,   84,   10,  196,  242,
 /*   820 */   196,  196,   16,   10,    9,   62,   63,   11,   96,   97,
 /*   830 */   103,   99,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   840 */   113,  114,  115,   10,  117,  118,  119,  120,  121,  122,
 /*   850 */   123,  124,  242,  242,   10,    7,   16,   11,  126,   25,
 /*   860 */    25,   16,  130,  151,  242,   50,  242,  242,  105,  106,
 /*   870 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  151,
 /*   880 */   117,  118,  119,  120,  121,  122,  123,  124,   14,   10,
 /*   890 */   151,  151,  186,   14,   15,   80,  151,  151,   19,   10,
 /*   900 */   168,  169,  196,  171,  186,  151,  151,   28,  151,   35,
 /*   910 */   186,   37,   38,   11,  196,   36,   37,   38,   39,  149,
 /*   920 */   196,  186,   11,  186,   10,   10,   47,  141,  141,  141,
 /*   930 */   141,  196,   11,  196,  186,   35,   62,   63,   11,   11,
 /*   940 */    33,   18,   25,  128,  196,   19,   10,  186,  242,   18,
 /*   950 */    21,   10,   15,   14,    9,  140,   10,  196,  186,   11,
 /*   960 */   242,   82,   83,   84,   32,   80,  242,   20,  196,   25,
 /*   970 */   129,  135,  130,   10,   10,   96,   97,  242,   99,  242,
 /*   980 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*   990 */   242,  117,  118,  119,  120,  121,  122,  123,  124,   11,
 /*  1000 */    15,  132,   10,  242,  136,  126,   14,   15,  186,  130,
 /*  1010 */    35,   19,  186,  186,  242,  186,  137,  186,  196,  135,
 /*  1020 */    28,  130,  196,  196,  186,  196,  147,  196,   36,   37,
 /*  1030 */    38,   39,  135,  130,  196,  136,  186,  139,    9,   47,
 /*  1040 */   135,  135,   24,   57,   10,   35,  196,  168,  169,  186,
 /*  1050 */   171,  186,    4,  186,    6,    7,    8,  139,   16,  196,
 /*  1060 */    12,  196,   35,  196,  242,  131,  141,  186,  242,  242,
 /*  1070 */    35,  242,  186,  242,   82,   83,   84,  196,  195,  166,
 /*  1080 */   242,  141,  196,    3,    5,   10,   11,  186,   96,   97,
 /*  1090 */   186,   99,  242,  139,   19,   13,  186,  196,  186,   39,
 /*  1100 */   196,  182,  186,   28,  195,  242,  196,  242,  196,  242,
 /*  1110 */   186,   36,  196,   38,   39,  195,  186,   69,  126,   16,
 /*  1120 */   196,  186,  130,  242,  186,  182,   32,  185,  242,   34,
 /*  1130 */   141,  196,  182,  182,  196,  186,   24,   31,  137,  187,
 /*  1140 */   163,  186,  189,  242,  222,  196,  242,  186,  190,  192,
 /*  1150 */   191,  186,  242,  148,  242,  186,  160,  196,  242,  161,
 /*  1160 */   168,  169,  229,  171,  186,  196,  242,  159,  198,  162,
 /*  1170 */   186,   96,   97,  186,  196,  127,  204,  242,   39,  131,
 /*  1180 */   242,  133,  187,  204,  224,  172,  138,  231,  186,  135,
 /*  1190 */   142,  242,  230,   32,   39,  186,  148,  186,  232,   24,
 /*  1200 */   233,  186,  186,  242,  185,  130,  170,  186,  186,  189,
 /*  1210 */   187,  242,  186,   32,  186,  191,  186,  192,  187,  248,
 /*  1220 */   242,   13,  249,  249,  248,  232,  186,  186,  248,  261,
 /*  1230 */   249,  248,  238,  186,  185,  221,  186,  255,  187,  249,
 /*  1240 */   187,  186,  186,  168,  211,  186,  229,  256,  216,  211,
 /*  1250 */   211,  186,  255,  187,  186,  209,  187,  186,  186,  186,
 /*  1260 */   186,  143,  186,  186,  186,  222,  222,  186,  103,  186,
 /*  1270 */   186,  186,  186,  186,  186,  186,   10,  186,  226,  222,
 /*  1280 */   124,  263,  219,  186,  263,  263,  228,  263,  263,  219,
 /*  1290 */   263,  254,  263,  263,  263,  263,  263,  263,  263,  209,
 /*  1300 */   263,  263,  210,  199,  199,  244,  244,  262,  244,  199,
 /*  1310 */   199,  244,  199,  263,  214,  263,  263,  263,  263,  263,
 /*  1320 */   263,  263,  263,  263,  226,  229,  225,  263,  263,  263,
 /*  1330 */   263,  263,  263,  263,  263,  263,  263,  244,  263,  263,
 /*  1340 */   263,  263,  263,  244,  263,  263,  263,  263,  263,  247,
};
const short SQLParser::yy_shift_ofst[] = {
 /*     0 */   784,  879, 1048,  879,  732,  732,  732,  732,  732,  732,
 /*    10 */   732,  732,  619,  608,  133,   22,   22,  732,  732,  732,
 /*    20 */   732,  732,  619,  161,  766,  -14,  580,  466,  430,  316,
 /*    30 */   280,  169,  616,  616,  616,  616,  616,  616,  616,  616,
 /*    40 */   616,  616,  616,  616,  727,  616,  616,  616,  763,  874,
 /*    50 */   874,  435,  732,  732,  732,  732,  732,  732,  732,  732,
 /*    60 */   732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
 /*    70 */   732,  732,  732,  732,  732,  992,  732,  732,  732,  732,
 /*    80 */   732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
 /*    90 */   732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
 /*   100 */     0,  147,  147,  147,  147,  147,  147, 1075,  619,   38,
 /*   110 */    38,   38,   38,  183,  183,  183,  183,   -8,  214,  214,
 /*   120 */     5,    5,  608,  608,  608, 1060, 1155, 1156, 1156, 1156,
 /*   130 */  1060, -141, -141, -141, -141,  361,  533,  742,  742,  742,
 /*   140 */  1060, 1060, 1060, 1060, 1060, 1139, 1139, 1060, 1060, 1060,
 /*   150 */  1060, 1139, 1060, 1139, 1060, -141, -141,   24,  -82,  -82,
 /*   160 */   -82,  -82,  -82,   61,  277,   55,   47,   21,    6,  -58,
 /*   170 */   -58,  -58,  587,   52,   34,  185,  564,  185,  588,  553,
 /*   180 */   553,  437,  185,  185,  185,  560,  421,  110,  344, 1165,
 /*   190 */  1266, 1005, 1060, 1165, 1005,  977, 1005, 1060, 1060, 1060,
 /*   200 */  1060, 1118, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060,
 /*   210 */  1060, 1060,  989, 1060,  989, 1060, 1060, 1208, 1060, 1060,
 /*   220 */  1208,  989, 1208, 1060, 1181,  989, 1060, 1060, 1082, 1060,
 /*   230 */  1060,  989, 1060, 1112, 1095, 1060, 1103,  989, 1060, 1082,
 /*   240 */  1060, 1036, 1008, 1175, 1036, 1060, 1060, 1155, 1161, 1054,
 /*   250 */  1161, 1054, 1060, 1161, 1054, 1060, 1161, 1054, 1060,  989,
 /*   260 */  1013, 1139, 1139, 1060, 1060, 1007, 1008,  998,  996,  977,
 /*   270 */  1005, 1001, 1060, 1106, 1060, 1112, 1095, 1094, 1103,  989,
 /*   280 */  1060, 1082, 1079, 1079, 1079, 1079, -141, -141, -141,  815,
 /*   290 */  -140,  239,  208,  208,  208,   29,  548,  429,   89,  349,
 /*   300 */   427,  544,  480,  180,  396,  372,  359,  358,  324,   82,
 /*   310 */   334,  138,  175,   11,   17,  329,   67,  -10,   13, 1080,
 /*   320 */   913, 1035, 1027,  934,  954, 1010,  940,  925, 1042, 1034,
 /*   330 */   986, 1018, 1029,  918,  906,  898,  905,  899,  897,  868,
 /*   340 */   884,  903,  891,  975,  869,  985,  988,  964,  963,  836,
 /*   350 */   842,  944,  841,  947,  885,  932,  948,  946,  945,  937,
 /*   360 */   939,  941,  931,  929,  936,  926,  923,  907,  900,  928,
 /*   370 */   840,  917,  927,  915,  921,  789,  788,  911,  787,  914,
 /*   380 */   770,  786,  902,  889,  757,  755,  754,  746,  745,  740,
 /*   390 */   739,  728,  712,  840,  835,  845,  834,  846,  840,  848,
 /*   400 */   844,  833,  816,  813,  806,  660,  807,  798,  797,  793,
 /*   410 */   791,  779,  783,  781,  775,  778,  771,  768,  764,  769,
 /*   420 */   720,  765,  720,  747,  613,  609,  676,  697,  664,  645,
 /*   430 */   659,  572,  586,  520,  433,  426,  366,  304,  346,  295,
 /*   440 */   301,  153,  234,
};
const short SQLParser::yy_reduce_ofst[] = {
 /*     0 */   307, -171, -111,   99,  428,  406,  273,  270,  123,  117,
 /*    10 */   114,  -48, -160,  -36,  152,  241,  157,  222,  178,  265,
 /*    20 */   246,  125,  130,  228,  162,  189,  189,  189,  189,  189,
 /*    30 */   189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
 /*    40 */   189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
 /*    50 */   189,  978,  969,  961,  949,  938,  935,  924,  916,  912,
 /*    60 */   910,  904,  901,  886,  881,  867,  865,  863,  850,  838,
 /*    70 */   831,  829,  827,  826,  822,  772,  761,  748,  737,  735,
 /*    80 */   724,  718,  706,  625,  624,  622,  611,  610,  577,  570,
 /*    90 */   562,  557,  478,  475,  470,  463,  454,  439,  423,  371,
 /*   100 */   189,  189,  189,  189,  189,  189,  189,  -12,  -12,  189,
 /*   110 */   189,  189,  189,  189,  189,  189,  189, -141,  189,  189,
 /*   120 */   319,   94,  397,  386,  296,  309,  144,  189,  189,  189,
 /*   130 */   136,  189,  189,  189,  189,  535,  305,  581,  575,  442,
 /*   140 */   482,  532,  523,  498,  496,  473,  458,  494,  -22,  425,
 /*   150 */   158,  440,  422,   69,  446, -178,  355, 1102, 1113, 1111,
 /*   160 */  1110, 1105, 1104, 1102, 1100, 1101, 1101, 1101, 1101, 1101,
 /*   170 */  1101, 1101, 1099, 1098, 1096, 1093, 1092, 1067, 1097, 1070,
 /*   180 */  1063,  984, 1064, 1062, 1061, 1091, 1045, 1058, 1052, 1090,
 /*   190 */  1037, 1057, 1089, 1046, 1044, 1017, 1043, 1088, 1087, 1086,
 /*   200 */  1085, 1014, 1084, 1083, 1081, 1078, 1077, 1076, 1074, 1073,
 /*   210 */  1072, 1071, 1069, 1068, 1066, 1065, 1059, 1039, 1056, 1055,
 /*   220 */  1038, 1053, 1033, 1050, 1032, 1051, 1047, 1041, 1049, 1040,
 /*   230 */  1030, 1031, 1028, 1025, 1024, 1026, 1020, 1023, 1022, 1019,
 /*   240 */  1021,  997,  993,  991,  982, 1016, 1015,  994,  990,  983,
 /*   250 */   981,  980, 1011,  974,  976, 1009,  973,  971, 1002,  995,
 /*   260 */   968,  979,  972,  987,  984,  967,  966,  956,  962,  933,
 /*   270 */   922,  960,  965,  970,  955,  957,  959,  958,  953,  952,
 /*   280 */   930,  942,  951,  950,  943,  919,  920,  909,  883,
};
const SQLParser_YYACTIONTYPE SQLParser::yy_default[] = {
 /*     0 */   615,  883,  726,  886,  883,  883,  883,  883,  883,  883,
 /*    10 */   883,  883,  733,  757,  753,  701,  701,  886,  886,  886,
 /*    20 */   881,  886,  886,  886,  886,  794,  886,  886,  886,  886,
 /*    30 */   886,  886,  802,  801,  651,  781,  798,  792,  796,  877,
 /*    40 */   878,  876,  880,  884,  886,  885,  795,  650,  836,  835,
 /*    50 */   862,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*    60 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*    70 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*    80 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*    90 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   100 */   855,  861,  868,  860,  856,  842,  841,  886,  732,  837,
 /*   110 */   840,  839,  838,  846,  845,  844,  843,  886,  848,  847,
 /*   120 */   886,  886,  886,  886,  886,  886,  728,  851,  850,  849,
 /*   130 */   886,  865,  864,  863,  852,  615,  886,  886,  886,  886,
 /*   140 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   150 */   886,  886,  886,  886,  886,  757,  747,  886,  886,  886,
 /*   160 */   886,  886,  886,  755,  627,  886,  886,  886,  886,  803,
 /*   170 */   714,  679,  753,  745,  797,  753,  886,  753,  886,  701,
 /*   180 */   701,  886,  753,  753,  753,  886,  879,  754,  745,  671,
 /*   190 */   806,  726,  886,  671,  726,  797,  726,  886,  886,  886,
 /*   200 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   210 */   886,  886,  762,  886,  762,  886,  886,  677,  886,  886,
 /*   220 */   677,  762,  677,  886,  695,  762,  886,  886,  628,  886,
 /*   230 */   886,  762,  886,  638,  648,  886,  667,  762,  886,  628,
 /*   240 */   886,  831,  785,  833,  831,  886,  886,  727,  784,  782,
 /*   250 */   784,  782,  886,  784,  782,  886,  784,  782,  886,  762,
 /*   260 */   886,  661,  659,  886,  886,  793,  785,  791,  789,  797,
 /*   270 */   726,  886,  886,  886,  886,  638,  648,  644,  667,  762,
 /*   280 */   886,  628,  620,  620,  620,  620,  633,  633,  633,  886,
 /*   290 */   886,  886,  710,  709,  632,  886,  886,  886,  886,  886,
 /*   300 */   704,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   310 */   886,  886,  886,  886,  658,  813,  886,  886,  886,  616,
 /*   320 */   886,  886,  886,  886,  886,  886,  886,  886,  706,  886,
 /*   330 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   340 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   350 */   886,  886,  686,  886,  886,  886,  886,  886,  886,  886,
 /*   360 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   370 */   834,  886,  886,  886,  886,  741,  886,  886,  740,  886,
 /*   380 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   390 */   886,  886,  886,  790,  886,  786,  886,  886,  882,  886,
 /*   400 */   886,  886,  886,  886,  722,  717,  886,  886,  886,  886,
 /*   410 */   886,  886,  886,  886,  886,  886,  886,  886,  886,  886,
 /*   420 */   662,  886,  660,  886,  814,  886,  886,  886,  886,  886,
 /*   430 */   886,  886,  886,  886,  886,  640,  886,  886,  886,  886,
 /*   440 */   886,  886,  886,  612,  617,  805,  804,  807,  800,  674,
 /*   450 */   673,  672,  799,  713,  712,  711,  707,  708,  705,  693,
 /*   460 */   692,  691,  690,  688,  687,  678,  703,  702,  689,  684,
 /*   470 */   682,  676,  764,  675,  652,  696,  694,  685,  683,  681,
 /*   480 */   653,  629,  630,  698,  697,  670,  669,  668,  637,  636,
 /*   490 */   635,  634,  631,  645,  830,  832,  829,  811,  872,  730,
 /*   500 */   735,  742,  739,  738,  737,  736,  734,  731,  729,  725,
 /*   510 */   750,  749,  748,  761,  760,  763,  759,  809,  808,  783,
 /*   520 */   758,  752,  751,  780,  779,  778,  777,  776,  775,  774,
 /*   530 */   773,  772,  771,  770,  769,  768,  767,  766,  765,  756,
 /*   540 */   746,  788,  787,  700,  699,  871,  875,  723,  874,  724,
 /*   550 */   873,  720,  719,  718,  869,  866,  858,  857,  870,  867,
 /*   560 */   859,  854,  853,  827,  826,  825,  824,  823,  666,  665,
 /*   570 */   663,  664,  656,  655,  654,  822,  821,  820,  819,  818,
 /*   580 */   817,  816,  815,  812,  721,  716,  715,  810,  744,  743,
 /*   590 */   649,  828,  643,  642,  641,  657,  647,  646,  639,  626,
 /*   600 */   625,  624,  623,  622,  621,  619,  618,  614,  613,  611,
};

#ifdef SQLParser_YYFALLBACK
	const SQLParser_YYCODETYPE SQLParser::yyFallback[] = {
    0,  /*          $ => nothing */
    0,  /*       SEMI => nothing */
   39,  /*    EXPLAIN => ID */
   39,  /*    ANALYZE => ID */
   39,  /*      BEGIN => ID */
    0,  /* TRANSACTION => nothing */
    0,  /*     COMMIT => nothing */
   39,  /*        END => ID */
   39,  /*   ROLLBACK => ID */
    0,  /*      TABLE => nothing */
    0,  /*         LP => nothing */
    0,  /*         RP => nothing */
    0,  /*     CREATE => nothing */
    0,  /*         IF => nothing */
    0,  /*        NOT => nothing */
    0,  /*     EXISTS => nothing */
    0,  /*      COMMA => nothing */
    0,  /*    PRIMARY => nothing */
   39,  /*        KEY => ID */
    0,  /*       NULL => nothing */
    0,  /*         AS => nothing */
   39,  /*    VIRTUAL => ID */
   39,  /*      RANGE => ID */
   39,  /*   INTERVAL => ID */
   39,  /*  PARTITION => ID */
   39,  /*         BY => ID */
   39,  /*       HASH => ID */
   39,  /* PARTITIONS => ID */
    0,  /*    INTEGER => nothing */
   39,  /* SUBPARTITION => ID */
   39,  /* SUBPARTITIONS => ID */
   39,  /*      EVERY => ID */
    0,  /*      USING => nothing */
   39,  /* TIMESERIES => ID */
   39,  /*       WITH => ID */
    0,  /*         EQ => nothing */
    0,  /*      FLOAT => nothing */
    0,  /*       PLUS => nothing */
    0,  /*      MINUS => nothing */
    0,  /*         ID => nothing */
   39,  /*      ABORT => ID */
   39,  /*     ACTION => ID */
   39,  /*      AFTER => ID */
   39,  /*        ASC => ID */
   39,  /*     ATTACH => ID */
   39,  /*     BEFORE => ID */
   39,  /*    CASCADE => ID */
   39,  /*       CAST => ID */
   39,  /*   COLUMNKW => ID */
   39,  /*   CONFLICT => ID */
   39,  /*   DATABASE => ID */
   39,  /*   DEFERRED => ID */
   39,  /*       DESC => ID */
   39,  /*     DETACH => ID */
   39,  /*       EACH => ID */
   39,  /*  EXCLUSIVE => ID */
   39,  /*       FAIL => ID */
   39,  /*        FOR => ID */
   39,  /*     IGNORE => ID */
   39,  /*  IMMEDIATE => ID */
   39,  /*  INITIALLY => ID */
   39,  /*    INSTEAD => ID */
   39,  /*    LIKE_KW => ID */
   39,  /*      MATCH => ID */
   39,  /*         NO => ID */
   39,  /*       PLAN => ID */
   39,  /*      QUERY => ID */
   39,  /*         OF => ID */
   39,  /*     OFFSET => ID */
   39,  /*     PRAGMA => ID */
   39,  /*      RAISE => ID */
   39,  /*  RECURSIVE => ID */
   39,  /*    RELEASE => ID */
   39,  /*    REPLACE => ID */
   39,  /*   RESTRICT => ID */
   39,  /*        ROW => ID */
   39,  /*  SAVEPOINT => ID */
   39,  /*       TEMP => ID */
   39,  /*    TRIGGER => ID */
   39,  /*     VACUUM => ID */
   39,  /*       VIEW => ID */
   39,  /*    WITHOUT => ID */
   39,  /*    EXTRACT => ID */
   39,  /* TIMESTAMPADD => ID */
   39,  /* TIMESTAMPDIFF => ID */
   39,  /*       YEAR => ID */
   39,  /*      MONTH => ID */
   39,  /*        DAY => ID */
   39,  /*       WEEK => ID */
   39,  /*       HOUR => ID */
   39,  /*     MINUTE => ID */
   39,  /*     SECOND => ID */
   39,  /* MILLISECOND => ID */
   39,  /*       GLOB => ID */
   39,  /*       LIKE => ID */
   39,  /*     REGEXP => ID */
   39,  /*       TRUE => ID */
   39,  /*      FALSE => ID */
   39,  /*      FORCE => ID */
   39,  /* TIMESTAMP_TRUNC => ID */
   39,  /* DAY_OF_WEEK => ID */
   39,  /* DAY_OF_YEAR => ID */
	};
#endif /* SQLParser_YYFALLBACK */

#ifndef NDEBUG
	/* For tracing shifts, the names of all terminals and nonterminals
	 ** are required.  The following table supplies these names */
	const char *const SQLParser::yyTokenName[] = {
  "$",             "SEMI",          "EXPLAIN",       "ANALYZE",     
  "BEGIN",         "TRANSACTION",   "COMMIT",        "END",         
  "ROLLBACK",      "TABLE",         "LP",            "RP",          
  "CREATE",        "IF",            "NOT",           "EXISTS",      
  "COMMA",         "PRIMARY",       "KEY",           "NULL",        
  "AS",            "VIRTUAL",       "RANGE",         "INTERVAL",    
  "PARTITION",     "BY",            "HASH",          "PARTITIONS",  
  "INTEGER",       "SUBPARTITION",  "SUBPARTITIONS",  "EVERY",       
  "USING",         "TIMESERIES",    "WITH",          "EQ",          
  "FLOAT",         "PLUS",          "MINUS",         "ID",          
  "ABORT",         "ACTION",        "AFTER",         "ASC",         
  "ATTACH",        "BEFORE",        "CASCADE",       "CAST",        
  "COLUMNKW",      "CONFLICT",      "DATABASE",      "DEFERRED",    
  "DESC",          "DETACH",        "EACH",          "EXCLUSIVE",   
  "FAIL",          "FOR",           "IGNORE",        "IMMEDIATE",   
  "INITIALLY",     "INSTEAD",       "LIKE_KW",       "MATCH",       
  "NO",            "PLAN",          "QUERY",         "OF",          
  "OFFSET",        "PRAGMA",        "RAISE",         "RECURSIVE",   
  "RELEASE",       "REPLACE",       "RESTRICT",      "ROW",         
  "SAVEPOINT",     "TEMP",          "TRIGGER",       "VACUUM",      
  "VIEW",          "WITHOUT",       "EXTRACT",       "TIMESTAMPADD",
  "TIMESTAMPDIFF",  "YEAR",          "MONTH",         "DAY",         
  "WEEK",          "HOUR",          "MINUTE",        "SECOND",      
  "MILLISECOND",   "GLOB",          "LIKE",          "REGEXP",      
  "TRUE",          "FALSE",         "FORCE",         "TIMESTAMP_TRUNC",
  "DAY_OF_WEEK",   "DAY_OF_YEAR",   "ANY",           "OR",          
  "XOR",           "AND",           "IS",            "BETWEEN",     
  "IN",            "ISNULL",        "NOTNULL",       "NE",          
  "GT",            "LE",            "LT",            "GE",          
  "ESCAPE",        "BITAND",        "BITOR",         "LSHIFT",      
  "RSHIFT",        "STAR",          "SLASH",         "REM",         
  "CONCAT",        "COLLATE",       "BITNOT",        "DROP",        
  "USER",          "IDENTIFIED",    "STRING",        "SET",         
  "PASSWORD",      "GRANT",         "ALL",           "ON",          
  "TO",            "SELECT",        "REVOKE",        "FROM",        
  "INDEX",         "DOT",           "ALTER",         "ADD",         
  "UNION",         "EXCEPT",        "INTERSECT",     "VALUES",      
  "HINT_START",    "HINT_END",      "DISTINCT",      "JOIN",        
  "INNER",         "CROSS",         "LEFT",          "OUTER",       
  "RIGHT",         "FULL",          "NATURAL",       "ORDER",       
  "GROUP",         "HAVING",        "LIMIT",         "WHERE",       
  "DELETE",        "UPDATE",        "INTO",          "INSERT",      
  "BLOB",          "VARIABLE",      "OVER",          "CASE",        
  "WHEN",          "THEN",          "ELSE",          "error",       
  "input",         "cmdlist",       "ecmd",          "explain",     
  "cmdx",          "cmd",           "trans_opt",     "create_table",
  "createkw",      "ifnotexists",   "nm",            "dbnm",        
  "columnlist",    "conslist_opt",  "is_timeseries",  "createtable_opt",
  "partitioning_options",  "column",        "typetoken",     "carglist",    
  "expr",          "singlecol",     "intervalOption",  "field",       
  "createtable_optlist",  "create_virtual_table",  "plus_num",      "minus_num",   
  "typename",      "signed",        "conslist",      "tcons",       
  "idxlist",       "orconf",        "resolvetype",   "ifexists",    
  "fullname",      "create_view",   "force",         "select",      
  "using_options",  "exprlist",      "idxlist_opt",   "sortascending",
  "addcolumnlist",  "addcolumn",     "hint_opt",      "selectnowith",
  "oneselect",     "multiselect_op",  "distinct",      "selcollist",  
  "from",          "where_opt",     "groupby_opt",   "having_opt",  
  "orderby_opt",   "limit_opt",     "valuelist",     "nexprlist",   
  "hintlist",      "hintlist1",     "onehint",       "hintexprlist",
  "hintexprlist1",  "hintexpr",      "term",          "sclp",        
  "as",            "seltabtree",    "stl_prefix",    "joinop",      
  "on_opt",        "using_opt",     "idlist",        "sortlist",    
  "setlist",       "insert_cmd",    "inscollist_opt",  "window_opt",  
  "partitionby_opt",  "likeop",        "between_op",    "in_op",       
  "case_operand",  "case_exprlist",  "case_else",   
	};
#endif /* NDEBUG */

#ifndef NDEBUG
	/* For tracing reduce actions, the names of all rules are required.
	 */
	const char *const SQLParser::yyRuleName[] = {
 /*   0 */ "input ::= cmdlist",
 /*   1 */ "cmdlist ::= cmdlist ecmd",
 /*   2 */ "cmdlist ::= ecmd",
 /*   3 */ "ecmd ::= SEMI",
 /*   4 */ "ecmd ::= explain cmdx SEMI",
 /*   5 */ "explain ::=",
 /*   6 */ "explain ::= EXPLAIN",
 /*   7 */ "explain ::= EXPLAIN ANALYZE",
 /*   8 */ "cmdx ::= cmd",
 /*   9 */ "cmd ::= BEGIN trans_opt",
 /*  10 */ "trans_opt ::=",
 /*  11 */ "trans_opt ::= TRANSACTION",
 /*  12 */ "cmd ::= COMMIT trans_opt",
 /*  13 */ "cmd ::= END trans_opt",
 /*  14 */ "cmd ::= ROLLBACK trans_opt",
 /*  15 */ "cmd ::= create_table",
 /*  16 */ "create_table ::= createkw TABLE ifnotexists nm dbnm LP columnlist conslist_opt RP is_timeseries createtable_opt partitioning_options",
 /*  17 */ "createkw ::= CREATE",
 /*  18 */ "ifnotexists ::=",
 /*  19 */ "ifnotexists ::= IF NOT EXISTS",
 /*  20 */ "columnlist ::= column",
 /*  21 */ "columnlist ::= columnlist COMMA column",
 /*  22 */ "column ::= nm typetoken carglist",
 /*  23 */ "carglist ::=",
 /*  24 */ "carglist ::= carglist PRIMARY KEY",
 /*  25 */ "carglist ::= carglist NOT NULL",
 /*  26 */ "carglist ::= carglist NULL",
 /*  27 */ "carglist ::= carglist AS LP expr RP VIRTUAL",
 /*  28 */ "partitioning_options ::=",
 /*  29 */ "partitioning_options ::= PARTITION BY HASH singlecol PARTITIONS INTEGER",
 /*  30 */ "partitioning_options ::= PARTITION BY RANGE|INTERVAL singlecol intervalOption",
 /*  31 */ "partitioning_options ::= PARTITION BY RANGE|INTERVAL singlecol intervalOption SUBPARTITION BY HASH singlecol SUBPARTITIONS INTEGER",
 /*  32 */ "intervalOption ::= EVERY LP INTEGER RP",
 /*  33 */ "intervalOption ::= EVERY LP INTEGER COMMA field RP",
 /*  34 */ "is_timeseries ::=",
 /*  35 */ "is_timeseries ::= USING TIMESERIES",
 /*  36 */ "singlecol ::= nm",
 /*  37 */ "singlecol ::= LP nm RP",
 /*  38 */ "createtable_opt ::=",
 /*  39 */ "createtable_opt ::= WITH LP createtable_optlist RP",
 /*  40 */ "createtable_optlist ::= createtable_optlist COMMA nm EQ expr",
 /*  41 */ "createtable_optlist ::= nm EQ expr",
 /*  42 */ "cmd ::= create_virtual_table",
 /*  43 */ "create_virtual_table ::= createkw VIRTUAL TABLE ifnotexists nm dbnm LP columnlist conslist_opt RP USING nm createtable_opt partitioning_options",
 /*  44 */ "plus_num ::= PLUS INTEGER|FLOAT",
 /*  45 */ "plus_num ::= INTEGER|FLOAT",
 /*  46 */ "minus_num ::= MINUS INTEGER|FLOAT",
 /*  47 */ "nm ::= ID",
 /*  48 */ "typetoken ::= typename",
 /*  49 */ "typetoken ::= typename LP signed RP",
 /*  50 */ "typetoken ::= typename LP signed RP typename",
 /*  51 */ "typetoken ::= typename LP signed COMMA signed RP",
 /*  52 */ "typetoken ::= typename LP signed COMMA signed RP typename",
 /*  53 */ "typename ::= ID",
 /*  54 */ "typename ::= typename ID",
 /*  55 */ "signed ::= plus_num",
 /*  56 */ "signed ::= minus_num",
 /*  57 */ "conslist_opt ::=",
 /*  58 */ "conslist_opt ::= COMMA conslist",
 /*  59 */ "conslist ::= tcons",
 /*  60 */ "tcons ::= PRIMARY KEY LP idxlist RP",
 /*  61 */ "orconf ::=",
 /*  62 */ "orconf ::= OR resolvetype",
 /*  63 */ "resolvetype ::= IGNORE",
 /*  64 */ "resolvetype ::= REPLACE",
 /*  65 */ "cmd ::= DROP TABLE ifexists fullname",
 /*  66 */ "ifexists ::= IF EXISTS",
 /*  67 */ "ifexists ::=",
 /*  68 */ "cmd ::= create_view",
 /*  69 */ "create_view ::= CREATE force VIEW nm dbnm AS select",
 /*  70 */ "force ::=",
 /*  71 */ "force ::= FORCE",
 /*  72 */ "cmd ::= DROP VIEW ifexists fullname",
 /*  73 */ "cmd ::= CREATE DATABASE nm",
 /*  74 */ "cmd ::= DROP DATABASE nm",
 /*  75 */ "cmd ::= CREATE USER nm IDENTIFIED BY STRING",
 /*  76 */ "cmd ::= CREATE USER nm",
 /*  77 */ "cmd ::= SET PASSWORD FOR nm EQ STRING",
 /*  78 */ "cmd ::= SET PASSWORD EQ STRING",
 /*  79 */ "cmd ::= DROP USER nm",
 /*  80 */ "cmd ::= GRANT ALL ON nm TO nm",
 /*  81 */ "cmd ::= GRANT SELECT ON nm TO nm",
 /*  82 */ "cmd ::= REVOKE ALL ON nm FROM nm",
 /*  83 */ "cmd ::= REVOKE SELECT ON nm FROM nm",
 /*  84 */ "cmd ::= CREATE INDEX ifnotexists nm ON nm dbnm LP idxlist RP using_options",
 /*  85 */ "using_options ::=",
 /*  86 */ "using_options ::= USING nm LP exprlist RP",
 /*  87 */ "idxlist ::= idxlist COMMA nm sortascending",
 /*  88 */ "idxlist ::= nm sortascending",
 /*  89 */ "sortascending ::= ASC",
 /*  90 */ "sortascending ::= DESC",
 /*  91 */ "sortascending ::=",
 /*  92 */ "cmd ::= DROP INDEX ifexists nm ON nm dbnm",
 /*  93 */ "cmd ::= DROP INDEX ifexists nm DOT nm dbnm",
 /*  94 */ "cmd ::= DROP INDEX ifexists nm",
 /*  95 */ "cmd ::= ALTER TABLE nm DROP PARTITION FOR LP expr RP",
 /*  96 */ "cmd ::= ALTER TABLE nm addcolumnlist",
 /*  97 */ "addcolumnlist ::= addcolumn",
 /*  98 */ "addcolumnlist ::= addcolumnlist COMMA addcolumn",
 /*  99 */ "addcolumn ::= ADD nm typetoken carglist",
 /* 100 */ "addcolumn ::= ADD COLUMNKW nm typetoken carglist",
 /* 101 */ "cmd ::= PRAGMA nm DOT nm DOT nm EQ nm",
 /* 102 */ "cmd ::= PRAGMA nm DOT nm DOT nm EQ plus_num",
 /* 103 */ "cmd ::= PRAGMA nm DOT nm DOT nm EQ minus_num",
 /* 104 */ "cmd ::= hint_opt select",
 /* 105 */ "select ::= oneselect",
 /* 106 */ "select ::= select multiselect_op oneselect",
 /* 107 */ "multiselect_op ::= UNION",
 /* 108 */ "multiselect_op ::= UNION ALL",
 /* 109 */ "multiselect_op ::= EXCEPT",
 /* 110 */ "multiselect_op ::= INTERSECT",
 /* 111 */ "oneselect ::= SELECT hint_opt distinct selcollist from where_opt groupby_opt having_opt orderby_opt limit_opt",
 /* 112 */ "select ::= valuelist",
 /* 113 */ "valuelist ::= VALUES LP nexprlist RP",
 /* 114 */ "valuelist ::= valuelist COMMA LP exprlist RP",
 /* 115 */ "hint_opt ::= HINT_START hintlist HINT_END",
 /* 116 */ "hint_opt ::=",
 /* 117 */ "hintlist ::= hintlist1",
 /* 118 */ "hintlist ::=",
 /* 119 */ "hintlist1 ::= hintlist1 onehint",
 /* 120 */ "hintlist1 ::= onehint",
 /* 121 */ "onehint ::= ID LP hintexprlist RP",
 /* 122 */ "hintexprlist ::= hintexprlist1",
 /* 123 */ "hintexprlist ::=",
 /* 124 */ "hintexprlist1 ::= hintexprlist1 hintexpr",
 /* 125 */ "hintexprlist1 ::= hintexpr",
 /* 126 */ "hintexpr ::= term",
 /* 127 */ "hintexpr ::= MINUS INTEGER",
 /* 128 */ "hintexpr ::= MINUS FLOAT",
 /* 129 */ "hintexpr ::= LP hintexprlist1 RP",
 /* 130 */ "hintexpr ::= ID",
 /* 131 */ "hintexpr ::= nm DOT nm",
 /* 132 */ "hintexpr ::= nm DOT nm DOT nm",
 /* 133 */ "distinct ::= DISTINCT",
 /* 134 */ "distinct ::= ALL",
 /* 135 */ "distinct ::=",
 /* 136 */ "sclp ::= selcollist COMMA",
 /* 137 */ "sclp ::=",
 /* 138 */ "selcollist ::= sclp expr as",
 /* 139 */ "selcollist ::= sclp STAR",
 /* 140 */ "selcollist ::= sclp nm DOT STAR",
 /* 141 */ "as ::= AS nm",
 /* 142 */ "as ::= ID",
 /* 143 */ "as ::=",
 /* 144 */ "from ::=",
 /* 145 */ "from ::= FROM seltabtree",
 /* 146 */ "stl_prefix ::= seltabtree joinop",
 /* 147 */ "stl_prefix ::=",
 /* 148 */ "seltabtree ::= stl_prefix nm dbnm as on_opt using_opt",
 /* 149 */ "seltabtree ::= stl_prefix nm dbnm LP exprlist RP as on_opt using_opt",
 /* 150 */ "seltabtree ::= stl_prefix LP select RP as on_opt using_opt",
 /* 151 */ "seltabtree ::= stl_prefix LP seltabtree RP as on_opt using_opt",
 /* 152 */ "dbnm ::=",
 /* 153 */ "dbnm ::= DOT nm",
 /* 154 */ "fullname ::= nm dbnm",
 /* 155 */ "joinop ::= COMMA|JOIN",
 /* 156 */ "joinop ::= INNER JOIN",
 /* 157 */ "joinop ::= CROSS JOIN",
 /* 158 */ "joinop ::= LEFT JOIN",
 /* 159 */ "joinop ::= LEFT OUTER JOIN",
 /* 160 */ "joinop ::= RIGHT JOIN",
 /* 161 */ "joinop ::= RIGHT OUTER JOIN",
 /* 162 */ "joinop ::= FULL JOIN",
 /* 163 */ "joinop ::= FULL OUTER JOIN",
 /* 164 */ "joinop ::= NATURAL JOIN",
 /* 165 */ "joinop ::= NATURAL INNER JOIN",
 /* 166 */ "joinop ::= NATURAL CROSS JOIN",
 /* 167 */ "joinop ::= NATURAL LEFT JOIN",
 /* 168 */ "joinop ::= NATURAL LEFT OUTER JOIN",
 /* 169 */ "joinop ::= NATURAL RIGHT JOIN",
 /* 170 */ "joinop ::= NATURAL RIGHT OUTER JOIN",
 /* 171 */ "on_opt ::= ON expr",
 /* 172 */ "on_opt ::=",
 /* 173 */ "using_opt ::= USING LP idlist RP",
 /* 174 */ "using_opt ::=",
 /* 175 */ "orderby_opt ::=",
 /* 176 */ "orderby_opt ::= ORDER BY sortlist",
 /* 177 */ "sortlist ::= sortlist COMMA expr sortascending",
 /* 178 */ "sortlist ::= expr sortascending",
 /* 179 */ "groupby_opt ::=",
 /* 180 */ "groupby_opt ::= GROUP BY nexprlist",
 /* 181 */ "having_opt ::=",
 /* 182 */ "having_opt ::= HAVING expr",
 /* 183 */ "limit_opt ::=",
 /* 184 */ "limit_opt ::= LIMIT expr",
 /* 185 */ "limit_opt ::= LIMIT expr OFFSET expr",
 /* 186 */ "limit_opt ::= LIMIT expr COMMA expr",
 /* 187 */ "where_opt ::=",
 /* 188 */ "where_opt ::= WHERE expr",
 /* 189 */ "cmd ::= hint_opt DELETE hint_opt FROM fullname as where_opt",
 /* 190 */ "cmd ::= hint_opt UPDATE hint_opt orconf fullname as SET setlist where_opt",
 /* 191 */ "setlist ::= setlist COMMA nm EQ expr",
 /* 192 */ "setlist ::= nm EQ expr",
 /* 193 */ "cmd ::= hint_opt insert_cmd hint_opt INTO fullname inscollist_opt select",
 /* 194 */ "insert_cmd ::= INSERT orconf",
 /* 195 */ "insert_cmd ::= REPLACE",
 /* 196 */ "inscollist_opt ::=",
 /* 197 */ "inscollist_opt ::= LP idlist RP",
 /* 198 */ "idlist ::= idlist COMMA nm",
 /* 199 */ "idlist ::= nm",
 /* 200 */ "expr ::= term",
 /* 201 */ "expr ::= LP expr RP",
 /* 202 */ "term ::= NULL",
 /* 203 */ "expr ::= ID",
 /* 204 */ "expr ::= nm DOT nm",
 /* 205 */ "expr ::= nm DOT nm DOT nm",
 /* 206 */ "term ::= INTEGER",
 /* 207 */ "term ::= FLOAT",
 /* 208 */ "term ::= TRUE",
 /* 209 */ "term ::= FALSE",
 /* 210 */ "term ::= BLOB",
 /* 211 */ "term ::= STRING",
 /* 212 */ "expr ::= VARIABLE",
 /* 213 */ "expr ::= CAST LP expr AS typetoken RP",
 /* 214 */ "expr ::= EXTRACT LP field COMMA exprlist RP",
 /* 215 */ "expr ::= TIMESTAMPADD LP field COMMA exprlist RP",
 /* 216 */ "expr ::= TIMESTAMPDIFF LP field COMMA exprlist RP",
 /* 217 */ "expr ::= TIMESTAMP_TRUNC LP field COMMA exprlist RP",
 /* 218 */ "field ::= YEAR|MONTH|DAY|HOUR|MINUTE|SECOND|MILLISECOND|DAY_OF_WEEK|DAY_OF_YEAR",
 /* 219 */ "expr ::= ID LP distinct exprlist RP window_opt",
 /* 220 */ "expr ::= ID LP STAR RP window_opt",
 /* 221 */ "window_opt ::=",
 /* 222 */ "window_opt ::= OVER LP partitionby_opt orderby_opt RP",
 /* 223 */ "partitionby_opt ::=",
 /* 224 */ "partitionby_opt ::= PARTITION BY nexprlist",
 /* 225 */ "expr ::= expr AND expr",
 /* 226 */ "expr ::= expr OR expr",
 /* 227 */ "expr ::= expr LT expr",
 /* 228 */ "expr ::= expr GT expr",
 /* 229 */ "expr ::= expr GE expr",
 /* 230 */ "expr ::= expr LE expr",
 /* 231 */ "expr ::= expr EQ expr",
 /* 232 */ "expr ::= expr NE expr",
 /* 233 */ "expr ::= expr BITAND expr",
 /* 234 */ "expr ::= expr BITOR expr",
 /* 235 */ "expr ::= expr LSHIFT expr",
 /* 236 */ "expr ::= expr RSHIFT expr",
 /* 237 */ "expr ::= expr PLUS expr",
 /* 238 */ "expr ::= expr MINUS expr",
 /* 239 */ "expr ::= expr STAR expr",
 /* 240 */ "expr ::= expr SLASH expr",
 /* 241 */ "expr ::= expr REM expr",
 /* 242 */ "expr ::= expr CONCAT expr",
 /* 243 */ "likeop ::= LIKE_KW|MATCH",
 /* 244 */ "likeop ::= NOT LIKE_KW|MATCH",
 /* 245 */ "expr ::= expr likeop expr",
 /* 246 */ "expr ::= expr likeop expr ESCAPE expr",
 /* 247 */ "expr ::= expr ISNULL",
 /* 248 */ "expr ::= expr NOTNULL",
 /* 249 */ "expr ::= expr NOT NULL",
 /* 250 */ "expr ::= expr IS expr",
 /* 251 */ "expr ::= expr IS NOT expr",
 /* 252 */ "expr ::= NOT expr",
 /* 253 */ "expr ::= BITNOT expr",
 /* 254 */ "expr ::= MINUS expr",
 /* 255 */ "expr ::= PLUS expr",
 /* 256 */ "between_op ::= BETWEEN",
 /* 257 */ "between_op ::= NOT BETWEEN",
 /* 258 */ "expr ::= expr between_op expr AND expr",
 /* 259 */ "in_op ::= IN",
 /* 260 */ "in_op ::= NOT IN",
 /* 261 */ "expr ::= expr in_op LP exprlist RP",
 /* 262 */ "expr ::= LP select RP",
 /* 263 */ "expr ::= expr in_op LP select RP",
 /* 264 */ "expr ::= EXISTS LP select RP",
 /* 265 */ "expr ::= CASE case_operand case_exprlist case_else END",
 /* 266 */ "case_exprlist ::= case_exprlist WHEN expr THEN expr",
 /* 267 */ "case_exprlist ::= WHEN expr THEN expr",
 /* 268 */ "case_else ::= ELSE expr",
 /* 269 */ "case_else ::=",
 /* 270 */ "case_operand ::= expr",
 /* 271 */ "case_operand ::=",
 /* 272 */ "exprlist ::= nexprlist",
 /* 273 */ "exprlist ::=",
 /* 274 */ "nexprlist ::= nexprlist COMMA expr",
 /* 275 */ "nexprlist ::= expr",
	};
#endif /* NDEBUG */

	const struct SQLParser::RULEINFO SQLParser::yyRuleInfo[] = {
  { 176, 1 },
  { 177, 2 },
  { 177, 1 },
  { 178, 1 },
  { 178, 3 },
  { 179, 0 },
  { 179, 1 },
  { 179, 2 },
  { 180, 1 },
  { 181, 2 },
  { 182, 0 },
  { 182, 1 },
  { 181, 2 },
  { 181, 2 },
  { 181, 2 },
  { 181, 1 },
  { 183, 12 },
  { 184, 1 },
  { 185, 0 },
  { 185, 3 },
  { 188, 1 },
  { 188, 3 },
  { 193, 3 },
  { 195, 0 },
  { 195, 3 },
  { 195, 3 },
  { 195, 2 },
  { 195, 6 },
  { 192, 0 },
  { 192, 6 },
  { 192, 5 },
  { 192, 11 },
  { 198, 4 },
  { 198, 6 },
  { 190, 0 },
  { 190, 2 },
  { 197, 1 },
  { 197, 3 },
  { 191, 0 },
  { 191, 4 },
  { 200, 5 },
  { 200, 3 },
  { 181, 1 },
  { 201, 14 },
  { 202, 2 },
  { 202, 1 },
  { 203, 2 },
  { 186, 1 },
  { 194, 1 },
  { 194, 4 },
  { 194, 5 },
  { 194, 6 },
  { 194, 7 },
  { 204, 1 },
  { 204, 2 },
  { 205, 1 },
  { 205, 1 },
  { 189, 0 },
  { 189, 2 },
  { 206, 1 },
  { 207, 5 },
  { 209, 0 },
  { 209, 2 },
  { 210, 1 },
  { 210, 1 },
  { 181, 4 },
  { 211, 2 },
  { 211, 0 },
  { 181, 1 },
  { 213, 7 },
  { 214, 0 },
  { 214, 1 },
  { 181, 4 },
  { 181, 3 },
  { 181, 3 },
  { 181, 6 },
  { 181, 3 },
  { 181, 6 },
  { 181, 4 },
  { 181, 3 },
  { 181, 6 },
  { 181, 6 },
  { 181, 6 },
  { 181, 6 },
  { 181, 11 },
  { 216, 0 },
  { 216, 5 },
  { 208, 4 },
  { 208, 2 },
  { 219, 1 },
  { 219, 1 },
  { 219, 0 },
  { 181, 7 },
  { 181, 7 },
  { 181, 4 },
  { 181, 9 },
  { 181, 4 },
  { 220, 1 },
  { 220, 3 },
  { 221, 4 },
  { 221, 5 },
  { 181, 8 },
  { 181, 8 },
  { 181, 8 },
  { 181, 2 },
  { 215, 1 },
  { 215, 3 },
  { 225, 1 },
  { 225, 2 },
  { 225, 1 },
  { 225, 1 },
  { 224, 10 },
  { 215, 1 },
  { 234, 4 },
  { 234, 5 },
  { 222, 3 },
  { 222, 0 },
  { 236, 1 },
  { 236, 0 },
  { 237, 2 },
  { 237, 1 },
  { 238, 4 },
  { 239, 1 },
  { 239, 0 },
  { 240, 2 },
  { 240, 1 },
  { 241, 1 },
  { 241, 2 },
  { 241, 2 },
  { 241, 3 },
  { 241, 1 },
  { 241, 3 },
  { 241, 5 },
  { 226, 1 },
  { 226, 1 },
  { 226, 0 },
  { 243, 2 },
  { 243, 0 },
  { 227, 3 },
  { 227, 2 },
  { 227, 4 },
  { 244, 2 },
  { 244, 1 },
  { 244, 0 },
  { 228, 0 },
  { 228, 2 },
  { 246, 2 },
  { 246, 0 },
  { 245, 6 },
  { 245, 9 },
  { 245, 7 },
  { 245, 7 },
  { 187, 0 },
  { 187, 2 },
  { 212, 2 },
  { 247, 1 },
  { 247, 2 },
  { 247, 2 },
  { 247, 2 },
  { 247, 3 },
  { 247, 2 },
  { 247, 3 },
  { 247, 2 },
  { 247, 3 },
  { 247, 2 },
  { 247, 3 },
  { 247, 3 },
  { 247, 3 },
  { 247, 4 },
  { 247, 3 },
  { 247, 4 },
  { 248, 2 },
  { 248, 0 },
  { 249, 4 },
  { 249, 0 },
  { 232, 0 },
  { 232, 3 },
  { 251, 4 },
  { 251, 2 },
  { 230, 0 },
  { 230, 3 },
  { 231, 0 },
  { 231, 2 },
  { 233, 0 },
  { 233, 2 },
  { 233, 4 },
  { 233, 4 },
  { 229, 0 },
  { 229, 2 },
  { 181, 7 },
  { 181, 9 },
  { 252, 5 },
  { 252, 3 },
  { 181, 7 },
  { 253, 2 },
  { 253, 1 },
  { 254, 0 },
  { 254, 3 },
  { 250, 3 },
  { 250, 1 },
  { 196, 1 },
  { 196, 3 },
  { 242, 1 },
  { 196, 1 },
  { 196, 3 },
  { 196, 5 },
  { 242, 1 },
  { 242, 1 },
  { 242, 1 },
  { 242, 1 },
  { 242, 1 },
  { 242, 1 },
  { 196, 1 },
  { 196, 6 },
  { 196, 6 },
  { 196, 6 },
  { 196, 6 },
  { 196, 6 },
  { 199, 1 },
  { 196, 6 },
  { 196, 5 },
  { 255, 0 },
  { 255, 5 },
  { 256, 0 },
  { 256, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 257, 1 },
  { 257, 2 },
  { 196, 3 },
  { 196, 5 },
  { 196, 2 },
  { 196, 2 },
  { 196, 3 },
  { 196, 3 },
  { 196, 4 },
  { 196, 2 },
  { 196, 2 },
  { 196, 2 },
  { 196, 2 },
  { 258, 1 },
  { 258, 2 },
  { 196, 5 },
  { 259, 1 },
  { 259, 2 },
  { 196, 5 },
  { 196, 3 },
  { 196, 5 },
  { 196, 4 },
  { 196, 5 },
  { 261, 5 },
  { 261, 4 },
  { 262, 2 },
  { 262, 0 },
  { 260, 1 },
  { 260, 0 },
  { 217, 1 },
  { 217, 0 },
  { 235, 3 },
  { 235, 1 },
	};




	/* APPENDIX */
} 
